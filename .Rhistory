source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
# a = list.files(path = "./dataset", pattern = NULL, all.files = FALSE,
#            full.names = FALSE, recursive = FALSE,
#            ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
# a
# library(ggcorrplot)
# library(shiny)
# library(plotly)
# ui <- bootstrapPage(
#   #numericInput('n', 'Number of obs', n),
#   plotOutput('plot'),
#   plotlyOutput('plotly')
# )
# # Define the server code
# server <- function(input, output) {
#   output$plot <- renderPlot({
#     cor <- cor(matrix(rnorm(100), ncol = 10))
#     ggcorrplot(cor)
#   })
#   output$plotly <- renderPlotly({
#     cor <- cor(matrix(rnorm(100), ncol = 10))
#     ggplotly(ggcorrplot(cor))
#   })
# }
# shinyApp(ui, server)
library(dplyr)
library(tidyverse)
library(kableExtra)
d = read.csv("dataset/heart_statlog.data.csv")
summary(d)
d %>% glimpse()
d %>%
drop_na() %>%
group_by(target) %>%
count() %>%
ungroup() %>%
kable(align = rep("c", 2)) %>% kable_styling("full_width" = F)
sample = sample(c(TRUE, FALSE), nrow(d), replace=TRUE, prob=c(0.7,0.3))
table(sample)
mauXaydung = d[sample, ]
mauKiemdinh = d[!sample, ]
moHinh1 = lm(age~ ., data = d)
summary(moHinh1)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
d = read.csv("dataset/heart_statlog.data.csv")
source("server.d/sidebar.dataset.r")
source("server.d/sidebar.working.r")
source("server.d/main.table.r")
source("server.d/main.plot.r")
source("server.d/main.summary.r")
server = function(input, output, session) {
output$result = renderPrint({
paste(url, sep = "/", input$dataset)
})
output$table = renderDataTable(
data.frame(d),
options = list(
searching = FALSE,
scrollX=TRUE
)
)
output$plot = renderPlotly({
# cor = cor(matrix(rnorm(100), ncol = 10))
corr = round(cor(d), 1)
ggplotly(ggcorrplot(corr, hc.order = TRUE, type = "lower", lab = TRUE))
})
}
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("init.r")
source("ui.r")
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
runApp()
runApp()
runApp()
source("init.r")
source("ui.r")
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
View(d)
View(d)
source("init.r")
source("ui.r")
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
View(d)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
source("init.r")
source("ui.r")
source("server.r")
shinyApp(ui, server)
summary(data_temp)
d = read.csv("dataset/heart_statlog.data.csv")
data_temp = data.frame(d)
summary(data_temp)
table(summary(data_temp))
runApp()
runApp()
